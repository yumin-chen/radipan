// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`preformatter addRadipanIdToHyperScript should add radipanId to nested HyperScript elements 1`] = `
"const {
  render
} = require("react");
const App = () => {
  return h("div", {
    radipanId: "00-XXXXXXX"
  }, [h("h1", {
    className: "App",
    radipanId: "00-XXXXXXX"
  }, "Hello, world!"), h("p", {
    radipanId: "00-XXXXXXX"
  }, "This is a paragraph."), h("button", {
    onClick: () => alert("Clicked!"),
    radipanId: "00-XXXXXXX"
  }, "Click me")]);
};
render(h(App, {
  radipanId: "00-XXXXXXX"
}), document.body);"
`;

exports[`preformatter addRadipanIdToRadipanSyntax should add radipanId to a nested Radipan Syntax element 1`] = `
"form.create({
  css: {
    display: "flex"
  },
  radipanId: "00-XXXXXXX"
}, [div.create({
  css: {
    color: "green"
  },
  radipanId: "00-XXXXXXX"
}, "green div"), span.create({
  css: {
    color: "red"
  },
  radipanId: "00-XXXXXXX"
}, "red span"), input.create({
  css: {
    color: "blue"
  },
  placeholder: "blue input",
  radipanId: "00-XXXXXXX"
})]);"
`;

exports[`preformatter addRadipanIdToRadipanSyntax should add radipanId to a simple Radipan Syntax element 1`] = `
"div.create({
  css: {
    color: "red"
  },
  radipanId: "00-XXXXXXX"
}, "whee!");"
`;

exports[`preformatter preformat should add radipanId JSX syntax 1`] = `
"function App() {
  return <main css={{
    width: "100%",
    height: "100vh",
    color: {
      base: "black",
      _osDark: "white"
    },
    background: {
      base: "white",
      _osDark: "black"
    }
  }} radipanId="00-XXXXXXX">
      <div css={divCss} radipanId="00-XXXXXXX">Hello Radipüêºn!</div>
    </main>;
}
const divCss = {
  fontSize: "2xl",
  fontWeight: "bold"
};
export default App;"
`;

exports[`preformatter preformat should add radipanId to a mixture of both JSX syntax and HyperScript syntax 1`] = `
"const {
  render
} = require("react");
const App = () => {
  return h("div", {
    radipanId: "00-XXXXXXX"
  }, [h("h1", {
    className: "App",
    radipanId: "00-XXXXXXX"
  }, "Hello, world!"), h("p", {
    radipanId: "00-XXXXXXX"
  }, "This is a paragraph."), h(Button, {
    onClick: () => alert("Clicked!"),
    radipanId: "00-XXXXXXX"
  }, "Click me")]);
};
const Button = ({
  children
}) => {
  return <button role="button" radipanId="00-XXXXXXX">children</button>;
};
render(<App radipanId="00-XXXXXXX" />, document.body);"
`;
